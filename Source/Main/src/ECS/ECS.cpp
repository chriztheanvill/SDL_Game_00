#include "ECS.hpp"

// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////

uint16_t IComponent::m_nextID = 0;	 // Static

// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////

Entity::Entity(uint16_t id, std::string name)
  : m_id(id)
  , m_name(name) {}

auto Entity::GetID( ) const -> uint16_t { return m_id; }

// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////

auto Registry::NewEntity(std::string_view name) -> Entity {
  uint16_t entityid = m_numEntities++;

  Signature signature;
  m_entityComponentSignatures.try_emplace(entityid, signature);

  Entity entity(entityid, std::string(name));
  entity.m_registry = this;
  m_entitiesToBeAdded.emplace(entity);

  return entity;
}

void Registry::KillEntity(Entity entity) {}

auto Registry::AddEntityToSystem(const Entity& entity) -> void {
  const uint16_t entityID = entity.GetID( );
  const std::bitset<32>& ecsID = m_entityComponentSignatures[entityID];

  for (const auto& [f, s] : m_systems) {
	const Signature& sysSignature = s->GetSignature( );

	bool isInterested = (ecsID & sysSignature) == sysSignature;

	if (isInterested) { s->AddEntity(entity); }
  }
}

// Se agregan las entidades, despues de cada frame
void Registry::Update( ) {
  for (const Entity& entity : m_entitiesToBeAdded) AddEntityToSystem(entity);
  m_entitiesToBeAdded.clear( );
}

// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////

void System::AddEntity(const Entity& entity) { m_entities.push_back(entity); }

void System::RemoveEntity(const Entity& entity) { std::erase(m_entities, entity); }

auto System::GetEntities( ) const -> std::vector<Entity> { return m_entities; }

auto System::GetSignature( ) const -> const Signature& { return m_componentSignature; }
